// Generated by CoffeeScript 1.6.3
(function() {
  var Model;

  Model = (function() {
    var User, UserSchema, config, fs, isAlphanumeric, mongoose, path, self;
    self = {};
    config = require('../config');
    mongoose = require('mongoose');
    mongoose.connect("mongodb://" + config.db.host + "/" + config.db.name);
    fs = require('fs');
    path = require('path');
    isAlphanumeric = function(value) {
      return value.length && /[a-z]/.test(value);
    };
    UserSchema = new mongoose.Schema({
      name: {
        type: String,
        unique: true,
        lowercase: true,
        required: true,
        validate: [isAlphanumeric, 'Not a proper value']
      },
      description: String,
      date: {
        type: Date,
        "default": Date.now
      }
    });
    UserSchema.pre('save', function(next) {
      this.name = this.name.replace(/\ /g, "_");
      return next();
    });
    mongoose.model('User', UserSchema);
    User = mongoose.model('User');
    self.all = function(callback) {
      return User.find({}, function(err, users) {
        return callback(err, users);
      });
    };
    self.create = function(data, callback) {
      var user;
      user = new User(data);
      return user.save(function(err) {
        return callback(err, user);
      });
    };
    self.find = function(conditions, callback) {
      return User.findOne(conditions, function(err, record) {
        return callback(err, record);
      });
    };
    self.remove = function(conditions, callback) {
      return User.findOne(conditions, function(err, record) {
        var user_name;
        if (err) {
          callback(err);
        }
        user_name = record.name;
        return record.remove(function(err) {
          return callback(err, user_name);
        });
      });
    };
    self.edit = function(data) {};
    return self;
  }).call(this);

  module.exports = Model;

}).call(this);
